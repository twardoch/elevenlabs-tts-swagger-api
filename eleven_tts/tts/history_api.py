# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from eleven_tts.api_client import ApiClient


class HistoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_history_item_v1_history_history_item_id_delete(self, history_item_id, **kwargs):  # noqa: E501
        """Delete History Item  # noqa: E501

        Delete a history item by its ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_history_item_v1_history_history_item_id_delete(history_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_item_id: History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs. (required)
        :param str xi_api_key: Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_history_item_v1_history_history_item_id_delete_with_http_info(history_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_history_item_v1_history_history_item_id_delete_with_http_info(history_item_id, **kwargs)  # noqa: E501
            return data

    def delete_history_item_v1_history_history_item_id_delete_with_http_info(self, history_item_id, **kwargs):  # noqa: E501
        """Delete History Item  # noqa: E501

        Delete a history item by its ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_history_item_v1_history_history_item_id_delete_with_http_info(history_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_item_id: History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs. (required)
        :param str xi_api_key: Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_item_id', 'xi_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_history_item_v1_history_history_item_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_item_id' is set
        if ('history_item_id' not in params or
                params['history_item_id'] is None):
            raise ValueError("Missing the required parameter `history_item_id` when calling `delete_history_item_v1_history_history_item_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_item_id' in params:
            path_params['history_item_id'] = params['history_item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'xi_api_key' in params:
            header_params['xi-api-key'] = params['xi_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/history/{history_item_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_history_items_v1_history_delete_post(self, body, **kwargs):  # noqa: E501
        """Delete History Items  # noqa: E501

        Delete a number of history items by their IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_history_items_v1_history_delete_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ElevenBodyDeleteHistoryItemsV1HistoryDeletePost body: (required)
        :param str xi_api_key: Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_history_items_v1_history_delete_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_history_items_v1_history_delete_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_history_items_v1_history_delete_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Delete History Items  # noqa: E501

        Delete a number of history items by their IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_history_items_v1_history_delete_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ElevenBodyDeleteHistoryItemsV1HistoryDeletePost body: (required)
        :param str xi_api_key: Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'xi_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_history_items_v1_history_delete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_history_items_v1_history_delete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'xi_api_key' in params:
            header_params['xi-api-key'] = params['xi_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/history/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_history_items_v1_history_download_post(self, body, **kwargs):  # noqa: E501
        """Download History Items  # noqa: E501

        Download one or more history items. If one history item ID is provided, we will return a single audio file. If more than one history item IDs are provided, we will provide the history items packed into a .zip file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_history_items_v1_history_download_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ElevenBodyDownloadHistoryItemsV1HistoryDownloadPost body: (required)
        :param str xi_api_key: Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_history_items_v1_history_download_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.download_history_items_v1_history_download_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def download_history_items_v1_history_download_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Download History Items  # noqa: E501

        Download one or more history items. If one history item ID is provided, we will return a single audio file. If more than one history item IDs are provided, we will provide the history items packed into a .zip file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_history_items_v1_history_download_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ElevenBodyDownloadHistoryItemsV1HistoryDownloadPost body: (required)
        :param str xi_api_key: Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'xi_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_history_items_v1_history_download_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `download_history_items_v1_history_download_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'xi_api_key' in params:
            header_params['xi-api-key'] = params['xi_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/history/download', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_audio_from_history_item_v1_history_history_item_id_audio_get(self, history_item_id, **kwargs):  # noqa: E501
        """Get Audio From History Item  # noqa: E501

        Returns the audio of an history item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audio_from_history_item_v1_history_history_item_id_audio_get(history_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_item_id: History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs. (required)
        :param str xi_api_key: Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_audio_from_history_item_v1_history_history_item_id_audio_get_with_http_info(history_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_audio_from_history_item_v1_history_history_item_id_audio_get_with_http_info(history_item_id, **kwargs)  # noqa: E501
            return data

    def get_audio_from_history_item_v1_history_history_item_id_audio_get_with_http_info(self, history_item_id, **kwargs):  # noqa: E501
        """Get Audio From History Item  # noqa: E501

        Returns the audio of an history item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audio_from_history_item_v1_history_history_item_id_audio_get_with_http_info(history_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str history_item_id: History item ID to be used, you can use GET https://api.elevenlabs.io/v1/history to receive a list of history items and their IDs. (required)
        :param str xi_api_key: Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['history_item_id', 'xi_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_audio_from_history_item_v1_history_history_item_id_audio_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'history_item_id' is set
        if ('history_item_id' not in params or
                params['history_item_id'] is None):
            raise ValueError("Missing the required parameter `history_item_id` when calling `get_audio_from_history_item_v1_history_history_item_id_audio_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'history_item_id' in params:
            path_params['history_item_id'] = params['history_item_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'xi_api_key' in params:
            header_params['xi-api-key'] = params['xi_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['audio/mpeg', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/history/{history_item_id}/audio', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_generated_items_v1_history_get(self, **kwargs):  # noqa: E501
        """Get Generated Items  # noqa: E501

        Returns metadata about all your generated audio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generated_items_v1_history_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xi_api_key: Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website.
        :return: ElevenGetHistoryResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_generated_items_v1_history_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_generated_items_v1_history_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_generated_items_v1_history_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Generated Items  # noqa: E501

        Returns metadata about all your generated audio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generated_items_v1_history_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str xi_api_key: Your API key. This is required by most endpoints to access our API programatically. You can view your xi-api-key using the 'Profile' tab on the website.
        :return: ElevenGetHistoryResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['xi_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_generated_items_v1_history_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'xi_api_key' in params:
            header_params['xi-api-key'] = params['xi_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ElevenGetHistoryResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
