# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription': 'SubscriptionResponseModel',
        'is_new_user': 'bool',
        'xi_api_key': 'str'
    }

    attribute_map = {
        'subscription': 'subscription',
        'is_new_user': 'is_new_user',
        'xi_api_key': 'xi_api_key'
    }

    def __init__(self, subscription=None, is_new_user=None, xi_api_key=None):  # noqa: E501
        """UserResponseModel - a model defined in Swagger"""  # noqa: E501
        self._subscription = None
        self._is_new_user = None
        self._xi_api_key = None
        self.discriminator = None
        self.subscription = subscription
        self.is_new_user = is_new_user
        self.xi_api_key = xi_api_key

    @property
    def subscription(self):
        """Gets the subscription of this UserResponseModel.  # noqa: E501


        :return: The subscription of this UserResponseModel.  # noqa: E501
        :rtype: SubscriptionResponseModel
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this UserResponseModel.


        :param subscription: The subscription of this UserResponseModel.  # noqa: E501
        :type: SubscriptionResponseModel
        """
        if subscription is None:
            raise ValueError("Invalid value for `subscription`, must not be `None`")  # noqa: E501

        self._subscription = subscription

    @property
    def is_new_user(self):
        """Gets the is_new_user of this UserResponseModel.  # noqa: E501


        :return: The is_new_user of this UserResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_new_user

    @is_new_user.setter
    def is_new_user(self, is_new_user):
        """Sets the is_new_user of this UserResponseModel.


        :param is_new_user: The is_new_user of this UserResponseModel.  # noqa: E501
        :type: bool
        """
        if is_new_user is None:
            raise ValueError("Invalid value for `is_new_user`, must not be `None`")  # noqa: E501

        self._is_new_user = is_new_user

    @property
    def xi_api_key(self):
        """Gets the xi_api_key of this UserResponseModel.  # noqa: E501


        :return: The xi_api_key of this UserResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._xi_api_key

    @xi_api_key.setter
    def xi_api_key(self, xi_api_key):
        """Sets the xi_api_key of this UserResponseModel.


        :param xi_api_key: The xi_api_key of this UserResponseModel.  # noqa: E501
        :type: str
        """
        if xi_api_key is None:
            raise ValueError("Invalid value for `xi_api_key`, must not be `None`")  # noqa: E501

        self._xi_api_key = xi_api_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserResponseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
