# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HistoryItemResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'history_item_id': 'str',
        'voice_id': 'str',
        'voice_name': 'str',
        'text': 'str',
        'date_unix': 'int',
        'character_count_change_from': 'int',
        'character_count_change_to': 'int',
        'content_type': 'str',
        'state': 'str'
    }

    attribute_map = {
        'history_item_id': 'history_item_id',
        'voice_id': 'voice_id',
        'voice_name': 'voice_name',
        'text': 'text',
        'date_unix': 'date_unix',
        'character_count_change_from': 'character_count_change_from',
        'character_count_change_to': 'character_count_change_to',
        'content_type': 'content_type',
        'state': 'state'
    }

    def __init__(self, history_item_id=None, voice_id=None, voice_name=None, text=None, date_unix=None, character_count_change_from=None, character_count_change_to=None, content_type=None, state=None):  # noqa: E501
        """HistoryItemResponseModel - a model defined in Swagger"""  # noqa: E501
        self._history_item_id = None
        self._voice_id = None
        self._voice_name = None
        self._text = None
        self._date_unix = None
        self._character_count_change_from = None
        self._character_count_change_to = None
        self._content_type = None
        self._state = None
        self.discriminator = None
        self.history_item_id = history_item_id
        self.voice_id = voice_id
        self.voice_name = voice_name
        self.text = text
        self.date_unix = date_unix
        self.character_count_change_from = character_count_change_from
        self.character_count_change_to = character_count_change_to
        self.content_type = content_type
        self.state = state

    @property
    def history_item_id(self):
        """Gets the history_item_id of this HistoryItemResponseModel.  # noqa: E501


        :return: The history_item_id of this HistoryItemResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._history_item_id

    @history_item_id.setter
    def history_item_id(self, history_item_id):
        """Sets the history_item_id of this HistoryItemResponseModel.


        :param history_item_id: The history_item_id of this HistoryItemResponseModel.  # noqa: E501
        :type: str
        """
        if history_item_id is None:
            raise ValueError("Invalid value for `history_item_id`, must not be `None`")  # noqa: E501

        self._history_item_id = history_item_id

    @property
    def voice_id(self):
        """Gets the voice_id of this HistoryItemResponseModel.  # noqa: E501


        :return: The voice_id of this HistoryItemResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this HistoryItemResponseModel.


        :param voice_id: The voice_id of this HistoryItemResponseModel.  # noqa: E501
        :type: str
        """
        if voice_id is None:
            raise ValueError("Invalid value for `voice_id`, must not be `None`")  # noqa: E501

        self._voice_id = voice_id

    @property
    def voice_name(self):
        """Gets the voice_name of this HistoryItemResponseModel.  # noqa: E501


        :return: The voice_name of this HistoryItemResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._voice_name

    @voice_name.setter
    def voice_name(self, voice_name):
        """Sets the voice_name of this HistoryItemResponseModel.


        :param voice_name: The voice_name of this HistoryItemResponseModel.  # noqa: E501
        :type: str
        """
        if voice_name is None:
            raise ValueError("Invalid value for `voice_name`, must not be `None`")  # noqa: E501

        self._voice_name = voice_name

    @property
    def text(self):
        """Gets the text of this HistoryItemResponseModel.  # noqa: E501


        :return: The text of this HistoryItemResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this HistoryItemResponseModel.


        :param text: The text of this HistoryItemResponseModel.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def date_unix(self):
        """Gets the date_unix of this HistoryItemResponseModel.  # noqa: E501


        :return: The date_unix of this HistoryItemResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._date_unix

    @date_unix.setter
    def date_unix(self, date_unix):
        """Sets the date_unix of this HistoryItemResponseModel.


        :param date_unix: The date_unix of this HistoryItemResponseModel.  # noqa: E501
        :type: int
        """
        if date_unix is None:
            raise ValueError("Invalid value for `date_unix`, must not be `None`")  # noqa: E501

        self._date_unix = date_unix

    @property
    def character_count_change_from(self):
        """Gets the character_count_change_from of this HistoryItemResponseModel.  # noqa: E501


        :return: The character_count_change_from of this HistoryItemResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._character_count_change_from

    @character_count_change_from.setter
    def character_count_change_from(self, character_count_change_from):
        """Sets the character_count_change_from of this HistoryItemResponseModel.


        :param character_count_change_from: The character_count_change_from of this HistoryItemResponseModel.  # noqa: E501
        :type: int
        """
        if character_count_change_from is None:
            raise ValueError("Invalid value for `character_count_change_from`, must not be `None`")  # noqa: E501

        self._character_count_change_from = character_count_change_from

    @property
    def character_count_change_to(self):
        """Gets the character_count_change_to of this HistoryItemResponseModel.  # noqa: E501


        :return: The character_count_change_to of this HistoryItemResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._character_count_change_to

    @character_count_change_to.setter
    def character_count_change_to(self, character_count_change_to):
        """Sets the character_count_change_to of this HistoryItemResponseModel.


        :param character_count_change_to: The character_count_change_to of this HistoryItemResponseModel.  # noqa: E501
        :type: int
        """
        if character_count_change_to is None:
            raise ValueError("Invalid value for `character_count_change_to`, must not be `None`")  # noqa: E501

        self._character_count_change_to = character_count_change_to

    @property
    def content_type(self):
        """Gets the content_type of this HistoryItemResponseModel.  # noqa: E501


        :return: The content_type of this HistoryItemResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this HistoryItemResponseModel.


        :param content_type: The content_type of this HistoryItemResponseModel.  # noqa: E501
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def state(self):
        """Gets the state of this HistoryItemResponseModel.  # noqa: E501


        :return: The state of this HistoryItemResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HistoryItemResponseModel.


        :param state: The state of this HistoryItemResponseModel.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["created", "deleted", "processing"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryItemResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryItemResponseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
