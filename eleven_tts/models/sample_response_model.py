# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://beta.elevenlabs.io. Our API is experimental so all endpoints are subject to change.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SampleResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sample_id': 'str',
        'file_name': 'str',
        'mime_type': 'str',
        'size_bytes': 'int',
        'hash': 'str'
    }

    attribute_map = {
        'sample_id': 'sample_id',
        'file_name': 'file_name',
        'mime_type': 'mime_type',
        'size_bytes': 'size_bytes',
        'hash': 'hash'
    }

    def __init__(self, sample_id=None, file_name=None, mime_type=None, size_bytes=None, hash=None):  # noqa: E501
        """SampleResponseModel - a model defined in Swagger"""  # noqa: E501
        self._sample_id = None
        self._file_name = None
        self._mime_type = None
        self._size_bytes = None
        self._hash = None
        self.discriminator = None
        self.sample_id = sample_id
        self.file_name = file_name
        self.mime_type = mime_type
        self.size_bytes = size_bytes
        self.hash = hash

    @property
    def sample_id(self):
        """Gets the sample_id of this SampleResponseModel.  # noqa: E501


        :return: The sample_id of this SampleResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this SampleResponseModel.


        :param sample_id: The sample_id of this SampleResponseModel.  # noqa: E501
        :type: str
        """
        if sample_id is None:
            raise ValueError("Invalid value for `sample_id`, must not be `None`")  # noqa: E501

        self._sample_id = sample_id

    @property
    def file_name(self):
        """Gets the file_name of this SampleResponseModel.  # noqa: E501


        :return: The file_name of this SampleResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this SampleResponseModel.


        :param file_name: The file_name of this SampleResponseModel.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def mime_type(self):
        """Gets the mime_type of this SampleResponseModel.  # noqa: E501


        :return: The mime_type of this SampleResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this SampleResponseModel.


        :param mime_type: The mime_type of this SampleResponseModel.  # noqa: E501
        :type: str
        """
        if mime_type is None:
            raise ValueError("Invalid value for `mime_type`, must not be `None`")  # noqa: E501

        self._mime_type = mime_type

    @property
    def size_bytes(self):
        """Gets the size_bytes of this SampleResponseModel.  # noqa: E501


        :return: The size_bytes of this SampleResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this SampleResponseModel.


        :param size_bytes: The size_bytes of this SampleResponseModel.  # noqa: E501
        :type: int
        """
        if size_bytes is None:
            raise ValueError("Invalid value for `size_bytes`, must not be `None`")  # noqa: E501

        self._size_bytes = size_bytes

    @property
    def hash(self):
        """Gets the hash of this SampleResponseModel.  # noqa: E501


        :return: The hash of this SampleResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this SampleResponseModel.


        :param hash: The hash of this SampleResponseModel.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SampleResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SampleResponseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
